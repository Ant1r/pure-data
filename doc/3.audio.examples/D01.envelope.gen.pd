#N canvas 430 38 561 667 12;
#X declare -stdpath ./;
#X text 222 289 attack;
#X text 296 290 release;
#X obj 229 432 line~;
#X msg 299 390 0 500;
#X obj 126 420 phasor~ 50;
#X obj 211 484 *~;
#X obj 211 536 wrap~;
#X msg 228 390 1 2500;
#X obj 126 444 -~ 0.5;
#X msg 163 366 10 200;
#X obj 211 597 output~;
#X obj 211 509 +~ 0.5;
#X obj 211 563 hip~ 5;
#X msg 238 341 stop;
#X text 52 235 The synthesis method is a form of waveshaping \, which is the subject of a later chapter.;
#X obj 373 14 declare -stdpath ./;
#X obj 228 309 bng 19 250 50 0 empty empty empty 0 -6 0 8 #dfdfdf #000000 #000000;
#X obj 299 310 bng 19 250 50 0 empty empty empty 0 -6 0 8 #dfdfdf #000000 #000000;
#X obj 228 366 delay 200;
#X text 50 152 You can hit the "attack" and/or "release" while something is still going on from a previous attack or release \, and the envelope generator does the "right thing". In particular \, the release button sends a "stop" to the [del] object \, in case it is still scheduled to go off from a previous attack.;
#X text 51 55 This patch uses an envelope generator to control a sound. When you hit "attack" two things happen. First \, the [line~] object rises to 10 in 200 milliseconds. Then after a delay of the same 200 msec via the [del] object \, the second message sends the [line~] back down to 1 over another 2500 msec. The "release" just ramps us down to zero at the end.;
#X obj 69 14 cnv 5 5 25 empty empty Envelope\ Generators 15 13 0 16 #dfdfdf #202020 0;
#X connect 2 0 5 1;
#X connect 3 0 2 0;
#X connect 4 0 8 0;
#X connect 5 0 11 0;
#X connect 6 0 12 0;
#X connect 7 0 2 0;
#X connect 8 0 5 0;
#X connect 9 0 2 0;
#X connect 11 0 6 0;
#X connect 12 0 10 0;
#X connect 13 0 18 0;
#X connect 16 0 9 0;
#X connect 16 0 18 0;
#X connect 17 0 3 0;
#X connect 17 0 13 0;
#X connect 18 0 7 0;

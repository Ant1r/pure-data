#N canvas 538 93 688 503 12;
#X declare -stdpath ./;
#N canvas 293 125 428 350 sample 0;
#N canvas 0 0 450 300 (subpatch) 0;
#X array G01-tab 62079 float 2;
#X coords 0 1 62079 -1 200 140 1;
#X restore 88 42 graph;
#X obj 68 218 loadbang;
#X obj 67 283 soundfiler;
#X msg 68 251 read -resize ../sound/voice.wav G01-tab;
#X connect 1 0 3 0;
#X connect 3 0 2 0;
#X restore 281 424 pd sample;
#X floatatom 63 284 6 0 999 0 - - - 0;
#X text 71 328 read from delay line;
#X obj 63 357 delread~ delay1;
#X obj 44 172 tabplay~ G01-tab;
#X obj 44 105 metro 1000;
#X text 75 223 write to delay line;
#X obj 45 420 output~;
#X obj 45 387 +~;
#X obj 59 242 delwrite~ delay1 1000;
#X text 61 198 test signal to delay;
#X obj 454 72 declare -stdpath ./;
#X text 269 126 You can delay a signal using the [delwrite~] and [delread~] objects. In this example \, a sample loops continuously and is added to a delayed copy of itself., f 55;
#X text 269 181 The [delwrite~] object creates the delay line. You give it a name and a size in milliseconds. Each [delwrite~] should have a different name., f 55;
#X text 269 232 The arguments of [delread~] are the name of a delwrite (of which there should be exactly one) and an optional delay time in milliseconds between 0 and the length of the delay line. The [delread~] object delays the signal at integer number of samples and does no interpolation., f 55;
#X text 269 311 Each [delwrite~] may have as many [delread~] objects as you wish \, which can then function as multiple delay taps., f 55;
#X text 116 283 <-- delay time (msec), f 11;
#X obj 44 73 tgl 19 0 empty empty empty 0 -10 0 12 #dfdfdf #000000 #000000 0 1;
#X obj 44 134 bng 19 250 50 0 empty empty empty 0 -10 0 12 #dfdfdf #000000 #000000;
#X text 69 73 <-- play repeatedly;
#X text 71 135 <-- play;
#X obj 282 67 cnv 5 5 25 empty empty Delays 15 13 0 16 #dfdfdf #202020 0;
#X connect 1 0 3 0;
#X connect 3 0 8 1;
#X connect 4 0 8 0;
#X connect 4 0 9 0;
#X connect 5 0 18 0;
#X connect 8 0 7 0;
#X connect 17 0 5 0;
#X connect 18 0 4 0;

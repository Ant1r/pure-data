#N canvas 614 76 546 638 12;
#X obj 83 141 osc~ 440;
#X obj 71 360 dac~;
#X text 75 56 CONTROLLING AMPLITUDE;
#X obj 83 278 *~ 0;
#X floatatom 108 241 8 0 0 0 - - - 0;
#X obj 108 208 dbtorms;
#X floatatom 108 176 8 0 80 0 - - - 0;
#X obj 325 37 ../5.reference/set-dsp-tgl;
#X text 356 40 DSP on/off;
#X msg 325 74 \; pd dsp \$1;
#X text 150 140 <-- 440 Hz sine wave at full blast;
#X text 174 175 <-- set amplitude here in dB;
#X text 174 207 <-- this converts dB to linear units;
#X text 174 240 <-- this shows the linear gain;
#X text 125 277 <-- multiply the sine wave by the gain \, reducing its amplitude. You can also use the [*~] object to multiply two signals. The "0" argument here instructs it that we'll just send it messages (not audio) to set the multiplier., f 48;
#X text 110 361 <-- and out (we're sending to both channels now).;
#X text 46 405 Amplitudes of audio signals can have any reasonable range \, but when you output a signal via the [dac~] object \, the samples should range between -1 and +1. Values out of that range will be "clipped"., f 67;
#X text 46 556 Pd assumes you have a two channel audio system unless you tell it otherwise. The [dac~] object \, by default \, connects to these two channels., f 67;
#X text 46 463 Here we calculate a gain for the multiplier [*~] using a [dbtorms] object (acronym for "dB to RMS"). 100 dB is normalized to one \, and zero dB artificially outputs a true 0 amplitude. Hence \, decibels in Pd are basically dBFS with an offset of 100! The dBFS is usually considered in digital systems and 0 dB corresponds to one \, whereas a true zero amplitude value consists of minus infinity dB., f 67;
#X connect 0 0 3 0;
#X connect 3 0 1 0;
#X connect 3 0 1 1;
#X connect 4 0 3 1;
#X connect 5 0 4 0;
#X connect 6 0 5 0;
#X connect 7 0 9 0;

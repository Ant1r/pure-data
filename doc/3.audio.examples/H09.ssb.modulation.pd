#N canvas 504 51 545 610 12;
#X declare -stdpath ./;
#X obj 226 408 cos~;
#X obj 269 390 +~ -0.25;
#X obj 269 413 cos~;
#X obj 151 464 *~;
#X obj 204 464 *~;
#X obj 151 490 -~;
#X floatatom 226 337 5 0 0 0 - - - 0;
#X text 33 374 pair of allpass;
#X text 33 390 filters to make;
#X text 33 406 90 degree phase;
#X text 26 421 shifted versions;
#X text 338 373 cosine and sine waves;
#N canvas 555 154 582 391 bell-loop 0;
#X obj 51 150 /;
#X obj 51 262 +~ 1;
#X msg 23 117 44100;
#X obj 23 91 t b f, f 7;
#X obj 51 312 outlet~;
#N canvas 0 0 450 300 (subpatch) 0;
#X array \$0-array 155944 float 2;
#X coords 0 1 155944 -1 279 142 1;
#X restore 251 105 graph;
#X obj 23 67 r \$0-totsamps;
#X obj 69 207 r \$0-totsamps;
#X obj 51 238 *~;
#X obj 51 176 phasor~;
#X obj 51 286 tabread4~ \$0-array;
#X connect 0 0 9 0;
#X connect 1 0 10 0;
#X connect 2 0 0 0;
#X connect 3 0 2 0;
#X connect 3 1 0 1;
#X connect 6 0 3 0;
#X connect 7 0 8 1;
#X connect 8 0 1 0;
#X connect 9 0 8 0;
#X connect 10 0 4 0;
#X restore 151 299 pd bell-loop;
#X obj 151 531 output~;
#X text 310 563 updated for Pd version 0.39;
#X obj 226 362 phasor~;
#X text 337 388 to form the real and;
#X text 337 404 imaginary part of a;
#X text 337 421 complex sinusoid;
#X text 41 50 The signal sideband modulator gives you only one sideband for each frequency in the input signal (whereas ring modulation gave both a positive and negative sideband). You can set the shift frequency positive to shift all frequencies upward \, or negative to shift them downwards., f 64;
#X text 41 130 The technique is to filter the input into two versions \, 90 degrees out of phase \, which can be interpreted as the real and imaginary part of a complex signal with positive frequencies only. You can then form the (complex) product of this with a (complex) sinusoid to modulate upward or downward in frequency., f 64;
#X obj 151 399 hilbert~;
#X text 235 465 <-- complex multiplier (calculates real part), f 22;
#N canvas 711 110 382 287 init 0;
#X obj 55 140 soundfiler;
#X obj 55 15 loadbang;
#X obj 55 41 bng 19 250 50 0 empty empty empty 0 -6 0 8 #dfdfdf #000000 #000000;
#X msg 55 113 read -resize ../sound/bell.aiff \$1;
#X obj 193 77 declare -stdpath ./;
#X obj 55 76 symbol \$0-array;
#X obj 55 172 s \$0-totsamps;
#X text 78 223 initialize and load file into array.;
#X connect 0 0 6 0;
#X connect 1 0 2 0;
#X connect 2 0 5 0;
#X connect 3 0 0 0;
#X connect 5 0 3 0;
#X restore 416 282 pd init;
#X text 270 337 <-- shift frequency;
#X text 68 19 SINGLE SIDEBAND MODULATION (AKA FREQUENCY SHIFTING);
#X text 41 213 The [hilbert~] object is an abstraction in the 'extra' library. It takes a signal and creates two copies that are 90 degrees out of phase., f 64;
#X text 64 282 sample loop for test signal, f 15;
#X connect 0 0 3 1;
#X connect 1 0 2 0;
#X connect 2 0 4 1;
#X connect 3 0 5 0;
#X connect 4 0 5 1;
#X connect 5 0 13 0;
#X connect 6 0 15 0;
#X connect 12 0 21 0;
#X connect 15 0 1 0;
#X connect 15 0 0 0;
#X connect 21 0 3 0;
#X connect 21 1 4 0;

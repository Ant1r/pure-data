#N canvas 376 68 862 639 12;
#X obj 84 132 osc~ 440;
#X obj 84 405 dac~;
#X obj 84 363 *~;
#X obj 132 326 line~;
#X msg 109 166 0.1 2000;
#X msg 144 251 0 2000;
#X msg 121 188 0.1 50;
#X msg 151 273 0 50;
#X msg 132 210 0.1;
#X msg 156 295 0;
#X text 273 187 ON;
#X text 302 276 OFF;
#X text 33 23 CONTROLLING AMPLITUDE USING LINE~;
#X text 25 445 The left inlet of [line~] is a target value. It reaches that target in the time specified (in milliseconds) to its right inlet., f 67;
#X text 25 481 (In this example \, message boxes with two numbers each are connected to [line~]'s left inlet. Except in some special cases \, Pd objects with more than one inlet will automatically distribute lists of numbers across their inlets. In this case \, "0 50" becomes \, "50 at right and 0 at left."), f 67;
#X text 25 558 The [line~] object (and its control brother \, [line]) treat their right inlet specially. The inlets don't retain values the way other inlets do but revert to zero whenever a target is received., f 67;
#X obj 362 127 ../5.reference/set-dsp-tgl;
#X text 393 130 DSP on/off;
#X msg 362 164 \; pd dsp \$1;
#X obj 649 244 hsl 162 19 0 1 0 0 empty empty empty -2 -10 0 12 #dfdfdf #000000 #000000 0 1;
#X obj 646 303 pow 4;
#X obj 560 381 osc~ 440;
#X msg 646 365 \$1 10;
#X obj 646 397 line~;
#X obj 628 456 *~;
#X obj 628 510 dac~;
#X floatatom 646 272 10 0 0 0 - - - 0;
#X floatatom 646 335 11 0 0 0 - - - 0;
#X text 150 132 <-- sine wave;
#X text 176 165 <-- slow;
#X text 173 189 <-- fast;
#X text 162 210 <-- instantly;
#X text 197 251 <-- slow;
#X text 189 273 <-- fast;
#X text 186 295 <-- instantly;
#X text 104 231 ---------------------------------------;
#X text 179 326 <-- ramp generator;
#X text 157 352 multiply the sine wave by the ramp. There's no longer a "0" argument \, which tells Pd to expect a signal here., f 44;
#X text 113 361 <----;
#X text 123 405 <-- out;
#X text 32 57 In this patch \, the multiplier is configured to multiply two signals. The amplitude is now a signal computed by the [line~] object \, which provides a smoothened ramp., f 62;
#X text 528 31 Below use a slider that generates values from 0 to 1 \, which passes through a quartic function (by going through [pow 4]). This non linear function is better suited for the way we perceive amplitudes. The value is then combined in a message by assuming the value of the '\$1' variable into a list followed by 10 \, which means that changes to the slider are smoothened by a 10 ms audio ramp! This mechanism is used in an [output~] abstraction presented later., f 43;
#X text 724 273 <-- linear;
#X text 730 335 <-- quartic;
#X connect 0 0 2 0;
#X connect 2 0 1 0;
#X connect 2 0 1 1;
#X connect 3 0 2 1;
#X connect 4 0 3 0;
#X connect 5 0 3 0;
#X connect 6 0 3 0;
#X connect 7 0 3 0;
#X connect 8 0 3 0;
#X connect 9 0 3 0;
#X connect 16 0 18 0;
#X connect 19 0 26 0;
#X connect 20 0 27 0;
#X connect 21 0 24 0;
#X connect 22 0 23 0;
#X connect 23 0 24 1;
#X connect 24 0 25 0;
#X connect 24 0 25 1;
#X connect 26 0 20 0;
#X connect 27 0 22 0;

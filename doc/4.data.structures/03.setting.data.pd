#N struct template3 float x float y float w float h float q;
#N canvas 264 23 640 583 12;
#X obj 311 275 pointer;
#X msg 327 242 next;
#X floatatom 311 365 4 0 0 0 - - - 0;
#N canvas 927 44 381 425 data3 1;
#X scalar template3 42 63 47 49 874 \;;
#X scalar template3 116 92 8 8 888 \;;
#X scalar template3 79 166 1 43 419 \;;
#X scalar template3 290 124 41 6 400 \;;
#X scalar template3 218 323 7 10 339 \;;
#X scalar template3 137 242 35 15 101 \;;
#X scalar template3 242 259 35 15 101 \;;
#X scalar template3 304 259 35 15 101 \;;
#X scalar template3 199 259 35 15 101 \;;
#X scalar template3 146 259 35 15 101 \;;
#X scalar template3 192 196 32 70 317 \;;
#X scalar template3 170 41 74 16 616 \;;
#X scalar template3 141 140 1 34 27 \;;
#X scalar template3 179 81 55 1 632 \;;
#X scalar template3 126 222 6 79 616 \;;
#X scalar template3 90 269 64 18 632 \;;
#X scalar template3 95 63 67 56 52 \;;
#X scalar template3 228 126 3 34 91 \;;
#X scalar template3 82 326 33 4 322 \;;
#X scalar template3 97 269 60 41 701 \;;
#X coords 0 425 1 424 0 0 0;
#X restore 176 381 pd data3;
#N canvas 503 200 512 300 template3 0;
#X obj 48 98 filledpolygon q 0 1 0 0 w 0 w h 0 h;
#X text 44 53 five numeric ("float") fields;
#X text 48 118 drawing a rectangle \, interior color q \, border black and one unit thick \, through the points (0 \, 0) \, (w \, 0) \, (w \, h) \, and (0 \, h). Note that the three points containing variables become hot spots for mouse dragging.;
#X obj 46 33 struct template3 float x float y float w float h float q;
#X text 53 241 This also allows you to click on the drawn number and drag or type to change the color parameter.;
#X obj 49 207 drawnumber q 0 -5 0;
#X text 205 198 Draw the value of q as an Arabic numeral \, at (0 \, -5) \, in black., f 32;
#X restore 73 381 pd template3;
#X obj 311 331 get template3 x y w h q;
#X floatatom 429 365 4 0 0 0 - - - 0;
#X floatatom 390 365 4 0 0 0 - - - 0;
#X floatatom 350 365 4 0 0 0 - - - 0;
#X floatatom 469 365 4 0 0 0 - - - 0;
#X floatatom 39 264 4 0 0 0 - - - 0;
#X obj 78 290 t b f;
#X floatatom 78 264 4 0 0 0 - - - 0;
#X obj 122 290 t b f;
#X floatatom 122 264 4 0 0 0 - - - 0;
#X obj 166 290 t b f;
#X floatatom 166 264 4 0 0 0 - - - 0;
#X obj 210 290 t b f;
#X floatatom 210 264 4 0 0 0 - - - 0;
#X text 45 242 x;
#X text 84 242 y;
#X text 128 242 w;
#X text 173 242 h;
#X text 216 242 q;
#X msg 311 214 traverse pd-data3 \, next;
#X text 404 538 Updated for Pd version 0.52;
#X text 30 86 Getting parameter values is as in the previous patch. However \, as you traverse the list with "next" messages the new pointers are also sent to the [set] object \, whose arguments define the template name and the name of the fields to set. You can drag on the five number boxes (after selecting an object with "traverse" and "next" messages) to change its location \, shape \, and color., f 84;
#X text 30 15 The [set] object allows you to change field values. In this example \, the template specifies five fields describing the (x \, y) location \, width (w) \, height (h) \, and color (q). A new feature is that the color is also drawn below the rectangles because we have a [drawnumber] object in the template., f 84;
#X text 428 277 click to --> randomize, f 12;
#N canvas 187 23 851 535 data-structures-colors 0;
#X obj 660 183 vsl 15 128 0 255 0 0 empty empty empty 0 -9 0 10 #0800fc #fcfcfc #000000 0 1;
#X obj 639 183 vsl 15 128 0 255 0 0 empty empty empty 0 -9 0 10 #00fc00 #000000 #000000 0 1;
#X obj 619 183 vsl 15 128 0 255 0 0 empty empty empty 0 -9 0 10 #fc0000 #000000 #000000 0 1;
#X obj 660 319 t b f;
#X obj 650 361 t b f;
#X floatatom 596 461 5 0 0 0 - - - 16;
#X obj 596 397 expr 100*int(8*$f1/255) + 10*int(8*$f2/255) + int(8*$f3/255), f 25;
#X obj 212 197 t f f f;
#X obj 157 245 / 100;
#X obj 311 260 mod 10;
#X obj 235 243 / 10;
#X obj 235 267 mod 10;
#X floatatom 235 294 5 0 0 0 - - - 0;
#X floatatom 311 294 5 0 0 0 - - - 0;
#X floatatom 157 294 5 0 0 0 - - - 0;
#X obj 157 268 int;
#X obj 157 321 min 8;
#X floatatom 157 345 5 0 0 0 - - - 0;
#X obj 311 321 min 8;
#X floatatom 311 345 5 0 0 0 - - - 0;
#X obj 235 321 min 8;
#X floatatom 235 345 5 0 0 0 - - - 0;
#X floatatom 235 399 5 0 0 0 - - - 0;
#X floatatom 311 399 5 0 0 0 - - - 0;
#X floatatom 157 399 5 0 0 0 - - - 0;
#X obj 311 429 min 255;
#X obj 235 429 min 255;
#X obj 157 429 min 255;
#X text 34 16 Data Structures have a low color resolution. Basically \, "Red" values are represented by hundreds \, "Green" by tens and Blue by units. The resolution is about 8 values for each \, (counting from 0 to 7) \, where each step jumps '32' in values (so you go from 0 to 224). An extra step (8) is possible but it only jumps to '225'). A 647 value means '6' for "Red" \, '4' for "Green" and '7' for blue. Possible values range from 0 to 888 (where digits that are '9' are just clipped to 8). Below we convert from values Data Structures understand to RGB values., f 70;
#X obj 157 371 * 32;
#X obj 235 371 * 32;
#X obj 311 371 * 32;
#X floatatom 212 163 5 0 888 0 - - - 16;
#X floatatom 235 459 5 0 0 0 - - - 0;
#X floatatom 311 459 5 0 0 0 - - - 0;
#X floatatom 157 459 5 0 0 0 - - - 0;
#X obj 311 485 s blue;
#X obj 235 485 s green;
#X obj 157 485 s red;
#X obj 619 97 r red;
#X obj 639 127 r green;
#X obj 660 155 r blue;
#X text 549 15 Below we convert from RGB to a color value Data Structures understand. The sliders range from 0 to 255, f 36;
#X connect 0 0 3 0;
#X connect 1 0 4 0;
#X connect 2 0 6 0;
#X connect 3 0 6 0;
#X connect 3 1 6 2;
#X connect 4 0 6 0;
#X connect 4 1 6 1;
#X connect 6 0 5 0;
#X connect 7 0 8 0;
#X connect 7 1 10 0;
#X connect 7 2 9 0;
#X connect 8 0 15 0;
#X connect 9 0 13 0;
#X connect 10 0 11 0;
#X connect 11 0 12 0;
#X connect 12 0 20 0;
#X connect 13 0 18 0;
#X connect 14 0 16 0;
#X connect 15 0 14 0;
#X connect 16 0 17 0;
#X connect 17 0 29 0;
#X connect 18 0 19 0;
#X connect 19 0 31 0;
#X connect 20 0 21 0;
#X connect 21 0 30 0;
#X connect 22 0 26 0;
#X connect 23 0 25 0;
#X connect 24 0 27 0;
#X connect 25 0 34 0;
#X connect 26 0 33 0;
#X connect 27 0 35 0;
#X connect 29 0 24 0;
#X connect 30 0 22 0;
#X connect 31 0 23 0;
#X connect 32 0 7 0;
#X connect 33 0 37 0;
#X connect 34 0 36 0;
#X connect 35 0 38 0;
#X connect 39 0 2 0;
#X connect 40 0 1 0;
#X connect 41 0 0 0;
#X restore 158 538 pd data-structures-colors;
#X text 24 420 Note that you can set values with decimal points for the field names and they can be retrieved by [get]. Nonetheless \, the x/y coordinates and width/height parameters for the scalars depend on the 'units per pixel' parameters for 'x' and 'y' dimensions. In this example it is "1" for both \, so you'll only see the shape of the objects change if you increment in integers \, float values are just truncated. The color field is a special case and it only considers integer values. For more on how color values work \, see subpatch below:, f 84;
#X obj 517 278 bng 19 250 50 0 empty empty empty 0 -10 0 12 #dfdfdf #000000 #000000;
#N canvas 395 94 513 527 randomize 0;
#X obj 182 285 pointer;
#X obj 175 456 append template3 x y w h q;
#X obj 182 51 loadbang;
#X obj 159 106 t b b b;
#X msg 182 237 traverse pd-data3;
#X msg 205 140 \; pd-data3 clear;
#X msg 138 154 0;
#X obj 85 180 f;
#X obj 124 181 + 1;
#X obj 87 156 until;
#X obj 105 210 sel 20;
#X obj 144 236 t b;
#X obj 77 382 random 300;
#X obj 158 382 random 300;
#X obj 382 382 random 1000;
#X obj 239 382 random 80;
#X obj 311 382 random 80;
#X obj 159 22 inlet;
#X obj 158 408 + 30;
#X obj 182 314 trigger bang bang pointer;
#X obj 182 77 bng 19 250 50 0 empty empty empty 0 -10 0 12 #dfdfdf #000000 #000000;
#X connect 0 0 19 0;
#X connect 2 0 20 0;
#X connect 3 0 9 0;
#X connect 3 1 4 0;
#X connect 3 1 6 0;
#X connect 3 2 5 0;
#X connect 4 0 0 0;
#X connect 6 0 7 1;
#X connect 7 0 10 0;
#X connect 7 0 8 0;
#X connect 8 0 7 1;
#X connect 9 0 7 0;
#X connect 10 0 9 1;
#X connect 10 1 11 0;
#X connect 11 0 0 0;
#X connect 12 0 1 0;
#X connect 13 0 18 0;
#X connect 14 0 1 4;
#X connect 15 0 1 2;
#X connect 16 0 1 3;
#X connect 17 0 3 0;
#X connect 18 0 1 1;
#X connect 19 0 12 0;
#X connect 19 1 13 0;
#X connect 19 1 14 0;
#X connect 19 1 15 0;
#X connect 19 1 16 0;
#X connect 19 2 1 5;
#X connect 20 0 3 0;
#X restore 517 309 pd randomize;
#X text 366 242 <-- go to next;
#X text 84 212 get pointer to first scalar -->;
#X obj 311 187 loadbang;
#X obj 66 333 set template3 x y w h q, f 32;
#X connect 0 0 5 0;
#X connect 0 0 36 5;
#X connect 1 0 0 0;
#X connect 5 0 2 0;
#X connect 5 1 8 0;
#X connect 5 2 7 0;
#X connect 5 3 6 0;
#X connect 5 4 9 0;
#X connect 10 0 36 0;
#X connect 11 0 36 0;
#X connect 11 1 36 1;
#X connect 12 0 11 0;
#X connect 13 0 36 0;
#X connect 13 1 36 2;
#X connect 14 0 13 0;
#X connect 15 0 36 0;
#X connect 15 1 36 3;
#X connect 16 0 15 0;
#X connect 17 0 36 0;
#X connect 17 1 36 4;
#X connect 18 0 17 0;
#X connect 24 0 0 0;
#X connect 31 0 32 0;
#X connect 35 0 24 0;

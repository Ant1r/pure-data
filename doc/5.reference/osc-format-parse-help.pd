#N canvas 261 32 893 650 12;
#X msg 294 184 1 2 3;
#X msg 308 232 set dog ferret;
#X obj 577 271 oscparse;
#X msg 281 157 4 5 weasel 6 7 rat;
#X obj 48 473 oscparse;
#X msg 48 278 -1 1 2 mule 4 5;
#X obj 48 406 oscformat -f b wombat;
#X text 413 258 creation arguments are OSC address, f 18;
#X msg 311 348 disconnect;
#X obj 281 377 netsend -u -b;
#X msg 298 322 connect localhost 5000;
#X text 13 612 see also:;
#X obj 234 613 list;
#X obj 174 613 netsend;
#X msg 56 306 format;
#X text 111 306 no format;
#X text 128 330 a 'blob';
#X text 156 356 mixtures;
#X obj 29 10 oscformat;
#X text 101 9 - convert lists to OSC packets;
#X listbox 577 332 11 0 0 0 - - - 0;
#X listbox 48 503 24 0 0 0 - - - 0;
#X obj 593 239 print OSC-packet;
#X obj 65 440 print OSC-packet;
#X obj 91 613 fudiformat;
#X obj 36 34 oscparse;
#X text 101 35 - parse OSC packets into Pd messages;
#N canvas 723 31 546 618 reference 0;
#X obj 8 52 cnv 5 500 5 empty empty INLET: 8 18 0 13 #202020 #000000 0;
#X obj 8 151 cnv 2 500 2 empty empty OUTLET: 8 12 0 13 #202020 #000000 0;
#X obj 8 188 cnv 2 500 2 empty empty ARGUMENTS: 8 12 0 13 #202020 #000000 0;
#X obj 7 284 cnv 5 500 5 empty empty empty 8 18 0 13 #202020 #000000 0;
#X obj 7 368 cnv 5 500 5 empty empty INLET: 8 18 0 13 #202020 #000000 0;
#X obj 6 583 cnv 5 500 5 empty empty empty 8 18 0 13 #202020 #000000 0;
#X obj 28 19 oscformat;
#X obj 28 337 oscparse;
#X text 116 66 list - list to format into a OSC packet.;
#X text 74 86 set <list> - set one or more addresses.;
#X text 138 253 1) list - list of one or more addresses;
#X text 95 382 list - OSC packet to convert to Pd list messages.;
#X text 39 109 format <symbol> -;
#X text 164 109 characters set format types: 'b' (blob) \, 'i' (integer) \, 'f' (float) or 's' (string)., f 43;
#X text 99 218 -f <symbol>: sets format as in the 'format' message;
#X obj 9 212 cnv 1 500 1 empty empty flag: 8 12 0 13 #7c7c7c #000000 0;
#X obj 9 243 cnv 1 500 1 empty empty args: 8 12 0 13 #7c7c7c #000000 0;
#X obj 8 549 cnv 2 500 2 empty empty ARGUMENTS: 8 12 0 13 #202020 #000000 0;
#X text 116 161 list - converted OSC packet from lists.;
#X text 103 18 - convert lsts to OSC packets.;
#X text 93 337 - parse OSC packets into Pd list messages.;
#X text 180 560 NONE;
#X obj 9 512 cnv 1 500 1 empty empty flag: 8 12 0 13 #7c7c7c #000000 0;
#X text 112 520 -n: interpret floats in addresses as floats.;
#X obj 6 471 cnv 1 500 1 empty empty 2nd: 8 12 0 13 #7c7c7c #000000 0;
#X obj 6 442 cnv 1 500 1 empty empty 1st: 8 12 0 13 #7c7c7c #000000 0;
#X obj 7 413 cnv 2 500 2 empty empty OUTLETS: 8 12 0 13 #202020 #000000 0;
#X text 125 448 list - OSC packets with address and message.;
#X text 118 480 float - split point for address and message.;
#X restore 701 30 pd reference;
#X text 795 30 <= click;
#X obj 7 65 cnv 1 880 1 empty empty empty 8 12 0 13 #000000 #000000 0;
#X obj 6 595 cnv 1 880 1 empty empty empty 8 12 0 13 #000000 #000000 0;
#X text 250 516 Note: there's no way using [oscparse] to distinguish between floats and integers \, nor to see blobs unambiguously. OSC messages may be combined in "bundles". If [oscparse] receives a bundle it simply parses all the messages in the bundle in the order they appear \, and ignores the bundle's time tag., f 87;
#X obj 577 209 netreceive -u -b 5000;
#X obj 298 298 loadbang;
#X text 384 378 send as UDP \, binary;
#X text 422 216 set message changes address, f 15;
#X text 250 409 If a format is given (via the '-f' flag or 'format' message) [oscformat] interprets incoming data as integer \, float \, string or 'blob'. If the elements aren't exhausted at the end of the format string \, the default (float and symbol) conversions are made for the rest. Blobs are a list of bytes that start with an atom count followed by that number of elements. (If an elements is a symbol \, its first byte is sent). If the count is negative \, the entire remaining message is included in the blob (but the OSC parser will report the actual number of elements)., f 87;
#X msg 64 331 format b;
#X msg 36 250 5 6 7 squirrel;
#X msg 71 355 format fib;
#X msg 76 378 format ifisfi;
#N canvas 238 347 606 217 more-about-OSC 0;
#X text 37 41 OSC is a complicated networking protocol (FUDI \, as used in [netsend] and [netreceive] is simpler and better but less widely used). The [oscparse] and [oscformat] objects make no attempt to deal with timetags or aggregates of packets \, nor with streaming OSC. Also \, no attempt is made here to clearly distinguish between the OSC address (symbols) and the following data \, nor between blobs and lists of numbers - it is assumed that you know what types the message should contain. You can alternatively use the OSC objects from the "mrpeach" library which have more features than these., f 77;
#X restore 64 546 pd more-about-OSC;
#X text 663 612 updated for Pd version 0.55-0;
#X text 42 76 [oscformat] makes OSC (Open Sound Control) packets (byte by byte) suitable for sending over the network via [netsend] (in UDP binary mode). The OSC address (the strings between the slashes) are given by the creation arguments or by "set" messages., f 117;
#X floatatom 756 273 5 0 0 0 - - - 0;
#X text 25 158 OSC messages with numbers and -----> symbols. OSC messages will contain only 'float' and 'string' data types \, except as shown below., f 36;
#X floatatom 123 473 5 0 0 0 - - - 0;
#X obj 577 302 list split, f 26;
#X listbox 666 332 19 0 0 0 - - - 0;
#X msg 301 210 set mouse apple;
#X obj 281 264 oscformat cat pig;
#X text 729 248 split point;
#X text 441 120 [oscparse] takes lists of numbers as bytes in an OSC message and outputs a list containing \, first \, the symbols making up the address of the OSC packet \, and following that \, numbers and symbols as present in the OSC message. A right outlet outputs the element number that splits address and message.;
#X text 734 204 receive OSC via UDP \, binary at port 5000, f 20;
#N canvas 585 245 628 392 -n 0;
#X msg 85 78 1 2 3;
#X msg 90 275 disconnect;
#X obj 60 307 netsend -u -b;
#X obj 77 225 loadbang;
#X obj 332 148 netreceive -u -b 5005;
#X msg 77 249 connect localhost 5005;
#X obj 60 175 oscformat 1;
#X obj 332 200 oscparse -n;
#X obj 332 243 route 1 2;
#X listbox 362 282 12 0 0 0 - - - 0;
#X msg 109 138 set 2;
#X msg 99 114 set 1;
#X msg 60 45 4 5 horse 6;
#X listbox 332 319 12 0 0 0 - - - 0;
#X text 230 34 [oscparse] outputs addresses as symbols even if they look like floats. Nonetheless \, you probably want them to be interpeted as floats \, but you need to use the '-n' flag for that. This way you can use [route] to route the message according to the float address., f 51;
#X connect 0 0 6 0;
#X connect 1 0 2 0;
#X connect 3 0 5 0;
#X connect 4 0 7 0;
#X connect 5 0 2 0;
#X connect 6 0 2 0;
#X connect 7 0 8 0;
#X connect 8 0 13 0;
#X connect 8 1 9 0;
#X connect 10 0 6 0;
#X connect 11 0 6 0;
#X connect 12 0 6 0;
#X restore 703 376 pd -n flag;
#X text 592 363 get addresses as floats ---->, f 15;
#X connect 0 0 50 0;
#X connect 1 0 50 0;
#X connect 2 0 47 0;
#X connect 3 0 50 0;
#X connect 4 0 21 0;
#X connect 5 0 6 0;
#X connect 6 0 4 0;
#X connect 6 0 23 0;
#X connect 8 0 9 0;
#X connect 10 0 9 0;
#X connect 14 0 6 0;
#X connect 32 0 2 0;
#X connect 32 0 22 0;
#X connect 33 0 10 0;
#X connect 37 0 6 0;
#X connect 38 0 6 0;
#X connect 39 0 6 0;
#X connect 40 0 6 0;
#X connect 44 0 47 1;
#X connect 47 0 20 0;
#X connect 47 1 48 0;
#X connect 49 0 50 0;
#X connect 50 0 9 0;
